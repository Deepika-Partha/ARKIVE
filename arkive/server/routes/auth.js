import { Router } from 'express';
const router = Router(); //Create a router instance
import { hash, compare } from 'bcrypt';
import { sign } from 'jsonwebtoken';
import { create, findOne } from '../models/User';

/**
 * User registration route.
 * Validates email and password, checks for existing email, hashes the password,
 * and creates a new user in the database.
 *
 * @route POST /api/register
 * @param {Object} req - Express request.
 * @param {Object} req.body - Request body.
 * @param {string} req.body.email - User's email address.
 * @param {string} req.body.password - User's password (min 5 characters).
 * @param {Object} res - Express response object.
 * @returns {Promise<void>} Sends a JSON response with a success or error message.
 * 
 * NOTE: The initial version of this code was originally generated by AI, given this JSDoc as a prompt. 
 * It was then reviewed, edited, and refined.
 */
router.post('/register', async (req, res) => { //Use router.post
  //TODO: emails are case sensitive currently, change to case-insensitive
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: 'Email and password required' });
  }

  //Basic email format validation
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: 'Invalid email format' });
  }

  //Basic password length validation
  if (password.length < 5) { //min 5 char
    return res.status(400).json({ error: 'Password must be at least 5 characters long' });
  }

  try {
    const passwordHash = await hash(password, 10);
    await create({ email, passwordHash });
    res.status(201).json({ message: 'Registration successful' });
  } catch (error) {
    console.error('Registration error:', error);
    if (error.code === 11000) { //Check for duplicate key error (email already exists)
      return res.status(409).json({ error: 'Email already registered' }); //409 Conflict
    }
    res.status(500).json({ error: 'Registration failed' });
  }
});

/**
 * Handles user login.
 * Finds the user by email, compares the provided password with the stored hash,
 * generates a JWT, and sets it in an HTTP-only cookie.
 *
 * @route POST /api/login
 * @param {Object} req - Express request object.
 * @param {Object} req.body - Request body.
 * @param {string} req.body.email - User's email address.
 * @param {string} req.body.password - User's password.
 * @param {Object} res - Express response object.
 * @returns {Promise<void>} Sends a JSON response and sets a cookie on success, or an error response on failure.
 * 
 * NOTE: The initial version of this code was originally generated by AI, given this JSDoc as a prompt. 
 * It was then reviewed, edited, and refined.
 */
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await findOne({ email });
  if (!user || !await compare(password, user.passwordHash)) {
    return res.status(400).json({ error: 'Invalid email or password' });
  }
  //Generate JWT
  const token = sign(
    { userId: user._id, email: user.email },
    process.env.JWT_SECRET, //Make sure JWT_SECRET is in your .env
    { expiresIn: '1d' }
  );
  //Set token in HTTP-only cookie
  res.cookie('token', token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production', //false unless NODE_ENV is 'production'
    sameSite: 'Strict',
    maxAge: 24 * 60 * 60 * 1000  //1 day
  });
  res.json({ message: 'Login successful' });
});

/**
 * Handles user logout.
 * Clears the 'token' cookie.
 *
 * @route POST /api/logout
 * @param {Object} req - Express request object.
 * @param {Object} res - Express response object.
 * @returns {void} Sends a JSON response.
 * 
 * NOTE: The initial version of this code was originally generated by AI, given this JSDoc as a prompt. 
 * It was then reviewed, edited, and refined.
 */
router.post('/logout', (req, res) => {
  res.clearCookie('token');
  res.json({ message: 'Logged out' });
});

export default router; //Export the router